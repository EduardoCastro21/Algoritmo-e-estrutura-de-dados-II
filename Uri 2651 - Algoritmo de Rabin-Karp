// Rabin-Karp algorithm in C

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>

#define d 26

void rabinKarp(char pattern[], char text[], int q) {
  int m = strlen(pattern);
  int n = strlen(text);
  int i, j;
  int p = 0;
  int t = 0;
  int h = 1;
  int cout = 0;

  for (i = 0; i < m - 1; i++)
    h = (h * d) % q;

  // Calculate hash value for pattern and text
  for (i = 0; i < m; i++) {
    p = (d * p + pattern[i]) % q;
    t = (d * t + text[i]) % q;
  }

  // Find the match
  for (i = 0; i <= n - m; i++) {
    if (p == t) {
      for (j = 0; j < m; j++) {
        if (text[i + j] != pattern[j])
          break;
      }

      if (j == m)
        //printf("Pattern is found at position:  %d \n", i + 1);
        cout++;
    }

    if (i < n - m) {
      t = (d * (t - text[i] * h) + text[i + m]) % q;

      if (t < 0)
        t = (t + q);
    }
  }
  if (cout == 0)
    printf("Link Tranquilo\n");
    else
    printf("Link Bolado\n");
}


// procedimento que converte uma string para minÃºsculo
void minusculo(char s1[], char s2[]){
    int i = 0;
    while(s1[i] != '\0'){
        s2[i] = tolower(s1[i]);
        i++;
    }
    s2[i] = '\0'; // caracteer que indica o fim da string
}


int main() {
  char text[100000];
  char aux[100000];
  char pattern[] = "zelda";
  scanf("%s", &aux);
  minusculo(aux, text);
  

  int q = 13;
  rabinKarp(pattern, text, q);
}
